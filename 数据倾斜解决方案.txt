1.调整并行度，可以缓解但是如果在极端情况下，比如某个key的数量有很多明显高于其他key的数量则调节并行度就失去了效果。
2.自定义Partitioner，问题同上，效果有限，而且要根据不同的数据集自定义专用的Partitionner，不够灵活。
3.reduce side join 转换为 map side join。 避免shuffer 将较小的数据集collect(或从文件读取)并广播变量，然后在大数据集中的map操作中取出广播变量并做类似于join的操作，可以彻底解决数据倾斜，因为不存在shuffle。但是使用场景较少，只适用于一个大数据集和一个小数据集join的场景
4.两阶段聚合，第一阶段为key增加随机前后缀，将倾斜key打散，然后聚合。第二阶段将前后缀去掉，再聚合。适用于rdd的reduceByKey等聚合算子或spaek sql中的group by进行分组聚合。效果很不错，但是只适用于聚合类的shuffle操作
5.为倾斜key增加随机前后缀，适用于两张表都很大，其中有一个数据集有少数几个key的数据量过大，另一个rdd key分布较为均匀，然后需要join。将有倾斜key的数据集中的倾斜key与别的key分开处理，为倾斜key打上随机前缀,同时另一个数据集中的相应的key也要分别加上对应的前缀，并扩容相应的倍数，确保数据不丢失，所以一般加上数字前缀，随机数的范围是多少另一个数据集对应key的数据就扩容几倍。相对于map side join 更能适应大数据集的join，但是如果倾斜key过多，则另一侧的数据会膨胀很大，且此时对倾斜key和非倾斜key分开处理，需要扫描数据两次，增加了开销。
6.当倾斜key很多，无法穷举，只能为所有key都增加随机前后缀，另一个数据集所有key也要对应扩容相应倍数，对内存资源的要求比较高。